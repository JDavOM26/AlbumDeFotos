/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.primerparcial_automatas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JLabel;
import javax.swing.Timer;
import java.util.List;
import javax.swing.JOptionPane;
import java.awt.Image;
/**
 *
 * @author david
 */
public class viewAlbum extends javax.swing.JFrame {
    String nombreAlbum;
     private Imagen imagen;
      
        private List<Imagen> imagenesDelAlbum;
    private int imagenActualIndex;
    private Timer timer;
  private boolean isPaused = false;
    private boolean isStopped = false;
    /**
     * Creates new form viewAlbum
     */
    public viewAlbum() {
        initComponents();
          loopInfinito.setSelected(false);
         for(Album a : InicioCrear.albumes){
            comboAlbumes.addItem(a.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboAlbumes = new javax.swing.JComboBox<>();
        imageView = new javax.swing.JLabel();
        reproducir = new javax.swing.JButton();
        pausa = new javax.swing.JButton();
        detener = new javax.swing.JButton();
        loopInfinito = new javax.swing.JToggleButton();
        siguiente = new javax.swing.JButton();
        anterior = new javax.swing.JButton();
        ultima = new javax.swing.JButton();
        primera = new javax.swing.JButton();
        manual = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Elegir album:");

        comboAlbumes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlbumesActionPerformed(evt);
            }
        });

        reproducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/boton-de-play.png"))); // NOI18N
        reproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirActionPerformed(evt);
            }
        });

        pausa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/boton-de-pausa-de-video.png"))); // NOI18N
        pausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausaActionPerformed(evt);
            }
        });

        detener.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/boton-detener.png"))); // NOI18N
        detener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerActionPerformed(evt);
            }
        });

        loopInfinito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/bucle.png"))); // NOI18N
        loopInfinito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopInfinitoActionPerformed(evt);
            }
        });

        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/boton-de-play (1).png"))); // NOI18N
        siguiente.setPreferredSize(new java.awt.Dimension(90, 90));
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });

        anterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/boton-de-rebobinado.png"))); // NOI18N
        anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorActionPerformed(evt);
            }
        });

        ultima.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/siguiente-pista.png"))); // NOI18N
        ultima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ultimaActionPerformed(evt);
            }
        });

        primera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/anterior.png"))); // NOI18N
        primera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primeraActionPerformed(evt);
            }
        });

        manual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/primerparcial_automatas/iconos/hacer-clic.png"))); // NOI18N
        manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageView, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(manual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(primera)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(anterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pausa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reproducir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detener)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(siguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ultima)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loopInfinito))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(comboAlbumes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboAlbumes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(imageView, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reproducir)
                    .addComponent(pausa)
                    .addComponent(detener)
                    .addComponent(ultima)
                    .addComponent(siguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(anterior)
                        .addComponent(primera))
                    .addComponent(loopInfinito)
                    .addComponent(manual))
                .addGap(56, 56, 56))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void reproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirActionPerformed
      manual.setSelected(false);
        loopInfinito.setSelected(false);
        isStopped = false;

        String nombreAlbumSeleccionado = comboAlbumes.getSelectedItem().toString();
        imagenesDelAlbum = new LinkedList<>();

        for (Imagen i : InicioCrear.imagenes) {
            if (i.getAlbum() != null && i.getAlbum().getNombre().equals(nombreAlbumSeleccionado)) {
                imagenesDelAlbum.add(i);
            }
        }

        if (!imagenesDelAlbum.isEmpty()) {
            if (timer != null) {
                timer.stop();
            }

            timer = new Timer(5000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (!isPaused && !isStopped) {
                        if (imagenActualIndex < imagenesDelAlbum.size() - 1) {
                            imagenActualIndex++;
                            mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
                        } else {
                            timer.stop();
                            isStopped = true;
                            JOptionPane.showMessageDialog(viewAlbum.this, "Reproducción completada.");
                            limpiarImageView();
                        }
                    }
                }
            });

            if (isPaused) {
                isPaused = false;
            } else {
                imagenActualIndex = 0;
                mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
            }
            timer.start();
        } else {
            System.out.println("No se encontró ninguna imagen para el álbum: " + nombreAlbumSeleccionado);
        }
        

    }//GEN-LAST:event_reproducirActionPerformed
        private void mostrarImagen(Imagen imagen) {
         String ruta = imagen.getRuta();
    ImageIcon originalIcon = new ImageIcon(ruta);

    // Obtener las dimensiones del JLabel
    int labelWidth = imageView.getWidth();
    int labelHeight = imageView.getHeight();

    // Redimensionar la imagen
    Image scaledImage = originalIcon.getImage().getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
    ImageIcon scaledIcon = new ImageIcon(scaledImage);

    // Establecer el icono redimensionado en el JLabel
    imageView.setIcon(scaledIcon);
    imageView.setHorizontalAlignment(JLabel.CENTER);
    imageView.setVerticalAlignment(JLabel.CENTER);
    imageView.revalidate();
    imageView.repaint();
    }

    private void comboAlbumesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlbumesActionPerformed
          nombreAlbum = comboAlbumes.getSelectedItem().toString();
          String nombreAlbumSeleccionado = comboAlbumes.getSelectedItem().toString();
    imagenesDelAlbum = new LinkedList<>();
          for (Imagen i : InicioCrear.imagenes) {
        if (i.getAlbum() != null && i.getAlbum().getNombre().equals(nombreAlbumSeleccionado)) {
            imagenesDelAlbum.add(i);
        }
           }
           if (imagenesDelAlbum != null && !imagenesDelAlbum.isEmpty()) {
        imagenActualIndex = 0; // Establece el índice al primer elemento
        mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
           }
    }//GEN-LAST:event_comboAlbumesActionPerformed
     
    private void pausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausaActionPerformed
        if (timer != null) {
            if (isPaused) {
                timer.start();
                isPaused = false;
            } else {
                timer.stop();
                isPaused = true;
            }
        }

          
    }//GEN-LAST:event_pausaActionPerformed

    private void detenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerActionPerformed

        if (timer != null) {
            timer.stop();
        }
        isPaused = false;
        isStopped = true;
       
    
    }//GEN-LAST:event_detenerActionPerformed

    private void loopInfinitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopInfinitoActionPerformed
      manual.setSelected(false);
        if (imagenesDelAlbum == null || imagenesDelAlbum.isEmpty()) {
        String nombreAlbumSeleccionado = comboAlbumes.getSelectedItem().toString();
        imagenesDelAlbum = new LinkedList<>();

        for (Imagen i : InicioCrear.imagenes) {
            if (i.getAlbum() != null && i.getAlbum().getNombre().equals(nombreAlbumSeleccionado)) {
                imagenesDelAlbum.add(i);
            }
        }

        if (imagenesDelAlbum.isEmpty()) {
            System.out.println("No se encontró ninguna imagen para el álbum: " + nombreAlbumSeleccionado);
            return;
        }
    }

    // Detener el temporizador si ya está funcionando
    if (timer != null) {
        timer.stop();
    }

    // Continuar desde la imagen actual
    timer = new Timer(5000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            if (!isPaused && !isStopped) {
                imagenActualIndex = (imagenActualIndex + 1) % imagenesDelAlbum.size();
                mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
            }
        }
    });
    timer.start();

    }//GEN-LAST:event_loopInfinitoActionPerformed

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
       if (!imagenesDelAlbum.isEmpty()) {
        boolean isLooping = loopInfinito.isSelected();
        if (isLooping) {
            imagenActualIndex = (imagenActualIndex + 1) % imagenesDelAlbum.size();
            mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
        } else {
            if (imagenActualIndex < imagenesDelAlbum.size() - 1) {
                imagenActualIndex++;
                mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
            } else {
                imagenActualIndex = imagenesDelAlbum.size() - 1;
                JOptionPane.showMessageDialog(viewAlbum.this, "Reproducción completada.");
                limpiarImageView();
                if (timer != null) {
                    timer.stop();
                }
            }
        }
    } else {
        System.out.println("No hay imágenes disponibles para avanzar.");
    }
    }//GEN-LAST:event_siguienteActionPerformed

    private void anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorActionPerformed
       if (!imagenesDelAlbum.isEmpty()) {
        boolean isLooping = loopInfinito.isSelected();
        if (isLooping) {
            imagenActualIndex = (imagenActualIndex - 1 + imagenesDelAlbum.size()) % imagenesDelAlbum.size();
        } else {
            imagenActualIndex--;
            if (imagenActualIndex < 0) {
                imagenActualIndex = 0;
            }
        }
        mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
    }
    }//GEN-LAST:event_anteriorActionPerformed

    private void ultimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ultimaActionPerformed
      if (imagenesDelAlbum != null && !imagenesDelAlbum.isEmpty()) {
        imagenActualIndex = imagenesDelAlbum.size() - 1; // Establece el índice al último elemento
        mostrarImagen(imagenesDelAlbum.get(imagenActualIndex)); // Muestra la última imagen
        
        // Opcional: Detener el temporizador si está en ejecución
        if (timer != null) {
            timer.stop();
        }
    } else {
        System.out.println("No hay imágenes disponibles para mostrar.");
    }
    }//GEN-LAST:event_ultimaActionPerformed

    private void primeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primeraActionPerformed
       if (imagenesDelAlbum != null && !imagenesDelAlbum.isEmpty()) {
        imagenActualIndex = 0; // Establece el índice al primer elemento
        mostrarImagen(imagenesDelAlbum.get(imagenActualIndex)); // Muestra la primera imagen
        
        // Opcional: Detener el temporizador si está en ejecución
        if (timer != null) {
            timer.stop();
        }
    } else {
        System.out.println("No hay imágenes disponibles para mostrar.");
    }
    }//GEN-LAST:event_primeraActionPerformed

    private void manualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualActionPerformed
          
        if (manual.isSelected()) {
             loopInfinito.setSelected(false);
        if (imagenesDelAlbum != null && !imagenesDelAlbum.isEmpty()) {
            mostrarImagen(imagenesDelAlbum.get(imagenActualIndex));
            if (timer != null) {
                timer.stop();
            }
        } else {
            System.out.println("No se encontró ninguna imagen para el álbum.");
        }
    } else {
        if (imagenesDelAlbum != null && !imagenesDelAlbum.isEmpty()) {
            if (timer != null) {
                timer.stop();
            }
            isStopped = false; // Reiniciar el estado de detenido
            reproducirActionPerformed(null); // Reutilizar la lógica de reproducción automática
        } else {
            System.out.println("No se encontró ninguna imagen para el álbum.");
        }
    }

    }//GEN-LAST:event_manualActionPerformed
      private void limpiarImageView() {
    imageView.setIcon(null);  // Eliminar la imagen del JLabel
    imageView.revalidate();  // Volver a validar el JLabel
    imageView.repaint();  // Repintar el JLabel para que los cambios sean visibles
}
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anterior;
    private javax.swing.JComboBox<String> comboAlbumes;
    private javax.swing.JButton detener;
    private javax.swing.JLabel imageView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton loopInfinito;
    private javax.swing.JToggleButton manual;
    private javax.swing.JButton pausa;
    private javax.swing.JButton primera;
    private javax.swing.JButton reproducir;
    private javax.swing.JButton siguiente;
    private javax.swing.JButton ultima;
    // End of variables declaration//GEN-END:variables
}
