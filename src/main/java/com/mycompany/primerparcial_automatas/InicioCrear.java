/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.primerparcial_automatas;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
/**
 *
 * @author david
 */
public class InicioCrear extends javax.swing.JFrame {
       private Album album;
       private Imagen imagen;
       public String ruta;
     
           public static ArrayList<Imagen> imagenes = new ArrayList<>();
           public static ArrayList<Album> albumes = new ArrayList<>();
         
    /**
     * Creates new form InicioCrear&
     */
    public InicioCrear() {
        initComponents();
         leerXmlAlInicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cargar = new javax.swing.JButton();
        albumNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        fileChooser = new javax.swing.JButton();
        guardarXml = new javax.swing.JButton();
        crear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cargar.setText("Cargar album");
        cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarActionPerformed(evt);
            }
        });

        albumNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                albumNombreActionPerformed(evt);
            }
        });

        jLabel1.setText("nombre album:");

        fileChooser.setText("...");
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        guardarXml.setText("Guardar album");
        guardarXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarXmlActionPerformed(evt);
            }
        });

        crear.setText("Asignar imagen");
        crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(albumNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addComponent(fileChooser))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(crear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardarXml)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cargar)))
                .addContainerGap(552, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(albumNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileChooser))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crear)
                    .addComponent(guardarXml)
                    .addComponent(cargar))
                .addGap(435, 435, 435))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarActionPerformed
        new viewAlbum().setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_cargarActionPerformed

    private void albumNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_albumNombreActionPerformed
       String nombre = albumNombre.getText();
    if (nombre.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese el nombre del álbum", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        boolean nombreExiste = false;
        for (Album a : InicioCrear.albumes) {
            if (a.getNombre().equals(nombre)) {
                nombreExiste = true;
                break;
            }
        }
        if (nombreExiste) {
            JOptionPane.showMessageDialog(this, "Ya existe un álbum con este nombre", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int response = JOptionPane.showConfirmDialog(this, "¿Quieres guardar el nombre del álbum?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                // Crear una nueva instancia de Album cada vez que se introduce un nuevo nombre
                Album nuevoAlbum = new Album();
                nuevoAlbum.setNombre(nombre);
                InicioCrear.albumes.add(nuevoAlbum);
                // Establecer el nuevo álbum como el álbum activo
                album = nuevoAlbum;
                JOptionPane.showMessageDialog(this, "Nombre del álbum guardado: " + album.getNombre(), "Éxito", JOptionPane.INFORMATION_MESSAGE);
                System.out.println(nombre);
            }
        }
    }
    }//GEN-LAST:event_albumNombreActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
      if (album == null || album.getNombre() == null) {
            JOptionPane.showMessageDialog(this, "Primero ingrese y guarde el nombre del álbum.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser jfilechooser = new JFileChooser();
        FileNameExtensionFilter filtrado = new FileNameExtensionFilter("JPG & PNG", "png", "jpg");
        jfilechooser.setFileFilter(filtrado);

        int respuesta = jfilechooser.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File file = jfilechooser.getSelectedFile();
            ruta = file.getPath();
             Imagen imagen = new Imagen();
          
     
            imagen.setNombre(file.getName());
            imagen.setRuta(ruta);
            InicioCrear.imagenes.add(imagen);
            

            System.out.println("Imagen agregada: " + imagen.getNombre() + " con ruta: " + imagen.getRuta());
           
        }
        
        
    }//GEN-LAST:event_fileChooserActionPerformed

    private void crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearActionPerformed
           String nombreAlbum = albumNombre.getText();
           
 
        Album albumSeleccionado = null;
        Imagen imagenSeleccionada = null;

        for(Album e : InicioCrear.albumes){
            if(e.getNombre().equals(nombreAlbum)){
                albumSeleccionado = e;
                break;
            }
        }
        
        for(Imagen e : InicioCrear.imagenes){
           
            if(e.getRuta().equals(ruta)){
                imagenSeleccionada = e;
                break;
            }
        }
        
        if(albumSeleccionado!=null && imagenSeleccionada!=null){
            System.out.println(imagenSeleccionada.getNombre());
            albumSeleccionado.asignarImagen(imagenSeleccionada);
            imagenSeleccionada.setAlbum(albumSeleccionado);
        }
        
        JOptionPane.showMessageDialog(this, "Imagen asignada exitosamente");
         System.out.println(album.getImagenes());
                       
    }//GEN-LAST:event_crearActionPerformed
      private void escribirXml(File archivo){
    
        FileWriter fichero = null;
        PrintWriter pw = null;
        
        try {
            
              fichero = new FileWriter(archivo);
              pw = new PrintWriter(fichero);
              
              pw.println("<albumes>");
              
              for(Album p : albumes){
              
                  pw.println("<album>");
                   pw.println("<Nombre>"+p.getNombre()+"</Nombre>");
                       for (Imagen i : p.getImagenes()) {
                pw.println("<ruta>" + i.getRuta() + "</ruta>");
            }                       
                  
                  pw.println("</album>");
                  
              }
              
              pw.println("</albumes>");
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            try {
                if(fichero!=null){
                    fichero.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
    }
       private void leerXml(File archivo) {
    try {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbBuilder = dbFactory.newDocumentBuilder();
        Document doc = dbBuilder.parse(archivo);

        doc.getDocumentElement().normalize();

        NodeList albumList = doc.getElementsByTagName("album");

        for (int i = 0; i < albumList.getLength(); i++) {
            Node albumNode = albumList.item(i);

            if (albumNode.getNodeType() == Node.ELEMENT_NODE) {
                Element albumElement = (Element) albumNode;

                // Crear nuevo álbum y establecer su nombre
                Album album = new Album();
                album.setNombre(albumElement.getElementsByTagName("Nombre").item(0).getTextContent());
                System.out.println("nombre"+album.getNombre());

                // Verificar si el álbum ya existe en la lista
                boolean albumExists = false;
                for (Album existingAlbum : albumes) {
                    if (existingAlbum.getNombre().equals(album.getNombre())) {
                        albumExists = true;
                        break;
                    }
                }

                if (!albumExists) {
                    // Obtener las rutas de imagen asociadas al álbum
                    NodeList rutaList = albumElement.getElementsByTagName("ruta");

                    for (int j = 0; j < rutaList.getLength(); j++) {
                        Node rutaNode = rutaList.item(j);

                        if (rutaNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element rutaElement = (Element) rutaNode;

                            // Crear nueva imagen y establecer su ruta
                            Imagen imagen = new Imagen();
                            imagen.setRuta(rutaElement.getTextContent());

                            // Verificar si la imagen ya existe en la lista
                            boolean imagenExists = false;
                            for (Imagen existingImagen : imagenes) {
                                if (existingImagen.getRuta().equals(imagen.getRuta())) {
                                    imagenExists = true;
                                    break;
                                }
                            }

                            if (!imagenExists) {
                                // Agregar imagen al álbum
                                album.asignarImagen(imagen);
                                imagenes.add(imagen);
                            }
                        }
                    }

                    // Agregar álbum a la lista de álbumes
                    albumes.add(album);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    }
       private void leerXmlAlInicio() {
        // Obtén la ruta del archivo XML en la raíz del proyecto
    String rutaProyecto = System.getProperty("user.dir");
    File archivo = new File(rutaProyecto, "albumes.xml");

    // Verifica si el archivo existe antes de intentar leerlo
    if (archivo.exists()) {
        // Verificar si ya se ha cargado previamente
        if (albumes.isEmpty() && imagenes.isEmpty()) {
            leerXml(archivo);
        } else {
            System.out.println("Los álbumes y las imágenes ya se han cargado.");
        }
    } else {
        System.out.println("El archivo albumes.xml no se encuentra en la raíz del proyecto.");
    }
    }
    private void guardarXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarXmlActionPerformed
         String rutaProyecto = System.getProperty("user.dir");
    
    // Construye la ruta completa para el archivo XML
    File archivo = new File(rutaProyecto, "albumes.xml");
    
    // Llama al método para escribir el XML
    escribirXml(archivo);
    
    // Opcional: Mensaje de confirmación
    JOptionPane.showMessageDialog(this, "Archivo XML guardado exitosamente en: " + archivo.getAbsolutePath());
      
    }//GEN-LAST:event_guardarXmlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InicioCrear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InicioCrear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InicioCrear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InicioCrear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InicioCrear().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField albumNombre;
    private javax.swing.JButton cargar;
    private javax.swing.JButton crear;
    private javax.swing.JButton fileChooser;
    private javax.swing.JButton guardarXml;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
